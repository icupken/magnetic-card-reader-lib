use std::{
    collections::HashMap,
    ffi::{CStr, CString},
};

fn main() {
    let mut table_keys = HashMap::new();
    table_keys.insert(0x04, ("a", "A"));
    table_keys.insert(0x05, ("b", "B"));
    table_keys.insert(0x06, ("c", "C"));
    table_keys.insert(0x07, ("d", "D"));
    table_keys.insert(0x08, ("e", "E"));
    table_keys.insert(0x09, ("f", "F"));
    table_keys.insert(0x0a, ("g", "G"));
    table_keys.insert(0x0b, ("h", "H"));
    table_keys.insert(0x0c, ("i", "I"));
    table_keys.insert(0x0d, ("j", "J"));
    table_keys.insert(0x0e, ("k", "K"));
    table_keys.insert(0x0f, ("l", "L"));
    table_keys.insert(0x10, ("m", "M"));
    table_keys.insert(0x11, ("n", "N"));
    table_keys.insert(0x12, ("o", "O"));
    table_keys.insert(0x13, ("p", "P"));
    table_keys.insert(0x14, ("q", "Q"));
    table_keys.insert(0x15, ("r", "R"));
    table_keys.insert(0x16, ("s", "S"));
    table_keys.insert(0x17, ("t", "T"));
    table_keys.insert(0x18, ("u", "U"));
    table_keys.insert(0x19, ("v", "V"));
    table_keys.insert(0x1a, ("w", "W"));
    table_keys.insert(0x1b, ("x", "X"));
    table_keys.insert(0x1c, ("y", "Y"));
    table_keys.insert(0x1d, ("z", "Z"));
    table_keys.insert(0x1e, ("1", "!"));
    table_keys.insert(0x1f, ("2", "@"));
    table_keys.insert(0x20, ("3", "#"));
    table_keys.insert(0x21, ("4", "$"));
    table_keys.insert(0x22, ("5", "%"));
    table_keys.insert(0x23, ("6", "^"));
    table_keys.insert(0x24, ("7", "&"));
    table_keys.insert(0x25, ("8", "*"));
    table_keys.insert(0x26, ("9", "("));
    table_keys.insert(0x27, ("0", ")"));
    table_keys.insert(0x2e, ("=", "+"));
    table_keys.insert(0x38, ("/", "?"));
    table_keys.insert(0x33, (";", ":"));

    let input_array = vec![
        [0x20, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x5, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x24, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x23, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x24, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x24, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x23, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x16, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0xc, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x5, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x11, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x8, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x9, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x17, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x8, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x6, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x4, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x15, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x7, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x38, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x20, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x23, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x23, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x26, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x24, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1e, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x27, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x22, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x21, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x20, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x20, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x20, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x20, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1f, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x20, 0x0, 0x38, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x28, 0x0],
    ];

    let api = hidapi::HidApi::new().unwrap();
    let s = "/dev/hidraw1".to_string();
    let c_string: CString = CString::new(s.as_str()).unwrap();
    let c_str: &CStr = c_string.as_c_str();
    let device = api.open_path(c_str).unwrap();
    let mut str = String::new();
    // Read data from device
    loop {
        let mut buf = [0u8; 4];
        device.read(&mut buf[..]).unwrap();
        if buf[2] == 0x28 {
            break;
        }
        if buf[0] == 0x20 || buf[0] == 0x02 {
            if let Some(c) = table_keys.get(&buf[2]) {
                str.push_str(c.1);
            }
        } else {
            if let Some(c) = table_keys.get(&buf[2]) {
                str.push_str(c.0);
            }
        }
    }

    //DEBUG
    // for word in input_array {
    //     if word[2] == 0x28 {
    //         break;
    //     }
    //     if word[0] == 0x20 || word[0] == 0x02 {
    //         if let Some(c) = table_keys.get(&word[2]) {
    //             str.push_str(c.1);
    //         }
    //     } else {
    //         if let Some(c) = table_keys.get(&word[2]) {
    //             str.push_str(c.0);
    //         }
    //     }
    // }
    // println!("{:#x?}", vec);
    //
    println!("Строка на выходе: {}", str);
}